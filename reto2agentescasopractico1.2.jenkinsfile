pipeline {
    agent none
    stages {
        stage('GetCode') {
            steps {
                git branch: 'master', url: 'https://github.com/MVBieto/helloworld-master.git'
            }
        }
        stage('Parallel static vs performance') {
            parallel {
                stage('Pruebas estaticas') {
                    parallel {
                        stage('Unit') {
                            agent { label 'windows-node1' }
                            steps {
                                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                    bat '''
                                    set PYTHONPATH=%WORKSPACE%
                                    pytest --junitxml=result-unit.xml test\\unit
                                    '''
                                junit 'result*.xml'
                                }
                            }
                        }
                        stage('Coverage') {
                            agent { label 'windows-node1' }
                            steps {
                                bat '''
                                coverage run --branch --source=app --omit=app\\__init__.ppy,app\\api.py -m pytest test\\unit
                                coverage xml
                                '''

                                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                    cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100,0,90', lineCoverageTargets: '100,0,95'
                                }
                            }
                        }
                        stage('Static') {
                            agent { label 'windows-node1' }
                            steps {
                                bat '''
                                    flake8 --exit-zero --format=pylint app >flake8.out
                                '''
                                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                                }
                            }
                        }
                        stage('Security') {
                            agent { label 'windows-node1' }
                            steps {
                                bat '''
                                    bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                                '''
                                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                                }
                            }
                        }
                    }
                }
                stage('Performance') {
                    agent { label 'windows-node2' }
                    steps {
                        bat '''
                            set FLASK_APP=app\\api.py
                            start flask run
                        '''
                        sleep 5
                        bat '''
                            C:\\Users\\mique\\Desktop\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\TEST_CLASE.jmx -f -l flask.jtl
                        '''
                        perfReport sourceDataFiles: 'flask.jtl'
                    }
                }
            }
        }
    }
}
