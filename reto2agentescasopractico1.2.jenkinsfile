pipeline {
    agent none
    stages {
        agent { windows-node1 }
        stage('GetCode') {
            steps {
                git branch: 'master', url: 'https://github.com/MVBieto/helloworld-master.git'
                stash name: 'source-code', includes: '**'
            }
        }
        stage('Pruebas estaticas') {
            parallel {
                stage('Unit') {
                    agent { windows-node1 }
                    steps {
                        unstash 'source-code'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                            set PYTHONPATH=%WORKSPACE%
                            coverage run --branch --source=app --omit=app\\__init__.ppy,app\\api.py -m pytest test\\unit
                            --junitxml=result-unit.xml
                            coverage xml
                            '''
                            junit 'result*.xml'
                        }
                    }
                }
                stage('Static') {
                    agent any
                    steps {
                        unstash 'source-code'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                                flake8 --exit-zero --format=pylint app >flake8.out
                            '''
                            recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                        }
                    }
                }
                stage('Security') {
                    agent any
                    steps {
                        unstash 'source-code'
                        bat '''
                            bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        '''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                        }
                    }
                }
            }
        }
        stage('Coverage') {
            agent { windows-node1 }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100,0,90', lineCoverageTargets: '100,0,95'
                }
            }
        }
        stage('Performance') {
            agent any
            steps {
                bat '''
                    set FLASK_APP=app\\api.py
                    start flask run
                '''
                sleep 2
                bat '''
                    C:\\Users\\mique\\Desktop\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\TEST_CLASE.jmx -f -l flask.jtl
                '''
                perfReport sourceDataFiles: 'flask.jtl'
            }
        }
    }
}

